"""
Private integration (all private message handler)
"""
from typing import Optional, Tuple

from vkbottle.bot import Blueprint, BotLabeler, Message, rules
from vkbottle.dispatch.dispenser import get_state_repr
from vkbottle.modules import logger
from vkbottle_types.objects import MessagesTemplateActionTypeNames

from bot import keyboard
from bot.db import Child, User, session
from bot.error_handler import diary_date_error_handler, message_error_handler
from diary import APIError, DiaryApi
from . import scheduler
from .other import AuthState, admin_log, tomorrow

labeler = BotLabeler(auto_rules=[rules.PeerRule(False)])

bp = Blueprint(name="Private", labeler=labeler)


@bp.on.message(state=AuthState.LOGIN)
@message_error_handler.catch
async def login_handler(message: Message):
    if not message.text:  # empty
        return await start_handler(message)
    await bp.state_dispenser.set(message.peer_id, AuthState.PASSWORD, login=message.text)
    await message.answer(
        message="üîë –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
    )


@bp.on.message(state=AuthState.PASSWORD)
@message_error_handler.catch
async def password_handler(message: Message):
    if not message.text:  # empty
        return await start_handler(message)
    login = message.state_peer.payload.get("login")
    password = message.text
    try:
        api = await DiaryApi.auth_by_login(login, password)
        await User.create(
            message.peer_id,
            login=login,
            password=password
        )
        for child_id in range(len(api.user.children)):
            await Child.create(message.peer_id, child_id)
        user = await User.get(vk_id=message.peer_id, chats=True, children=True)
        await bp.state_dispenser.set(message.peer_id, AuthState.AUTH, api=api, user=user)

        await admin_log(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @id{message.peer_id}")
        logger.info(f"Auth new user: id{message.peer_id}")
        await message.answer(
            message="üîì –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n"
                    "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É",
            keyboard=keyboard.MENU
        )
    except APIError as e:
        if e.json_not_success:
            await bp.state_dispenser.set(message.peer_id, AuthState.LOGIN)
            error_message = e.json.get("message")
            if error_message:
                await message.answer(
                    message=f"üöß {error_message}\n\n"
                            "üîí –û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ª–æ–≥–∏–Ω."
                )
            else:
                await message.answer(
                    message="üöß –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑.\n\n"
                            "üîí –û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ª–æ–≥–∏–Ω."
                )
            await e.session.close()
        else:  # problems with server
            raise e


@bp.on.message(rules.PayloadRule({"command": "start"}))  # startup button
@bp.on.message(rules.CommandRule("–Ω–∞—á–∞—Ç—å") | rules.CommandRule("start"))
@message_error_handler.catch
async def start_handler(message: Message):
    # if user is registered
    if message.state_peer is not None and message.state_peer.state == get_state_repr(AuthState.AUTH):
        await message.answer(
            message="üöß –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é",
            keyboard=keyboard.MENU
        )
    else:
        user: Optional[User] = await session.get(User, message.peer_id)

        # if user not registered
        if user is None:
            # check client_info
            if MessagesTemplateActionTypeNames.CALLBACK not in message.client_info.button_actions:
                await message.answer(
                    "üöß –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã callback-–∫–Ω–æ–ø–∫–∏.\n"
                    "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–∞ Android –∏ iOS, a —Ç–∞–∫ –∂–µ —Å–∞–π—Ç–æ–º vk.com.",
                    dont_parse_links=True
                )
                await admin_log(
                    f"–£ [id{message.peer_id}|—á—É–≤–∞–∫–∞] –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è callback. –°—Ä–æ—á–Ω–æ –¥–æ–ø—Ä–æ—Å–∏—Ç—å!"
                )
            elif message.client_info.keyboard is False:
                await message.answer(
                    "üöß –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–æ–≤.\n"
                    "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–∞ Android –∏ iOS, a —Ç–∞–∫ –∂–µ —Å–∞–π—Ç–æ–º vk.com.",
                    dont_parse_links=True
                )
            elif message.client_info.inline_keyboard is False:
                await message.answer(
                    "üöß –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                    "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–∞ Android –∏ iOS, a —Ç–∞–∫ –∂–µ —Å–∞–π—Ç–æ–º vk.com.",
                    dont_parse_links=True
                )
            else:
                await bp.state_dispenser.set(message.peer_id, AuthState.LOGIN)
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∏ –∏–∑ sosh.mon-ra.ru "
                    "–î–ª—è –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞.\n\n"
                    "üîí –û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ª–æ–≥–∏–Ω.\n\n"
                    "üöß –ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º "
                    "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º (vk.com/@schoolbot04-terms). –û–±—ã—á–Ω–æ–µ –¥–µ–ª–æ, –±–µ–∑ –Ω–µ–≥–æ –º—ã –Ω–µ –∏–º–µ–µ–º "
                    "–ø—Ä–∞–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                    dont_parse_links=True,
                    keyboard=keyboard.EMPTY
                )

        # if user in db  todo check logic
        else:
            login, password = user.login, user.password
            try:
                api = await DiaryApi.auth_by_login(login, password)
                await bp.state_dispenser.set(message.peer_id, AuthState.AUTH, api=api)
                await message.answer(
                    message="üöß –ë—ã–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑."
                )
                logger.debug(f"Re-auth @id{message.peer_id} complete")
            except APIError as e:
                logger.warning(f"Re-auth @id{message.peer_id} failed! {e}")
                await e.session.close()
                await message.answer(
                    message="üöß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–∞–π—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                )


# command handlers

@bp.on.message(rules.CommandRule("–ø–æ–º–æ—â—å") | rules.CommandRule("help"))
@message_error_handler.catch
async def help_command(message: Message):
    await message.answer(
        "üìí –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üî∏ /–ø–æ–º–æ—â—å -- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫\n"
        "üî∏ /–Ω–∞—á–∞—Ç—å -- –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±–æ—Ç–µ\n"
        "üî∏ /–º–µ–Ω—é -- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n\n"
        "üìí –ö–æ–º–∞–Ω–¥—ã, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ –º–µ–Ω—é:\n"
        "üî∏ /–¥–Ω–µ–≤–Ω–∏–∫ –¥–¥.–º–º.–≥–≥–≥–≥ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ (–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏—è, –æ—Ü–µ–Ω–∫–∏)\n"
        "üî∏ /–æ—Ü–µ–Ω–∫–∏ –¥–¥.–º–º.–≥–≥–≥–≥ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏\n"
        "üî∏ /–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "üìí –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–ª–∏–∞—Å—ã (help, start, menu, diary, marks, settings)."
    )


@bp.on.message(rules.CommandRule("–º–µ–Ω—é") | rules.CommandRule("menu"), state=AuthState.AUTH)
@message_error_handler.catch
async def menu_command(message: Message):
    await message.answer(
        "üìó –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é",
        keyboard=keyboard.MENU
    )


@bp.on.message(
    rules.CommandRule("–¥–Ω–µ–≤–Ω–∏–∫", args_count=1) | rules.CommandRule("diary", args_count=1),
    state=AuthState.AUTH
)
@diary_date_error_handler.catch
async def diary_command(message: Message, args: Tuple[str]):
    date = args[0]
    api: DiaryApi = message.state_peer.payload["api"]
    diary = await api.diary(date)
    await message.answer(
        message=diary.info(),
        keyboard=keyboard.diary_week(date, api.user.children),
        dont_parse_links=True
    )


@bp.on.message(rules.CommandRule("–¥–Ω–µ–≤–Ω–∏–∫") | rules.CommandRule("diary"), state=AuthState.AUTH)
@diary_date_error_handler.catch
async def diary_empty_command(message: Message):
    return await diary_command(message, (tomorrow(),))  # type: ignore


@bp.on.message(rules.CommandRule(("–æ—Ü–µ–Ω–∫–∏", 1)) | rules.CommandRule(("marks", 1)), state=AuthState.AUTH)
@diary_date_error_handler.catch
async def marks_command(message: Message, args: Tuple[str]):
    date = args[0]
    api: DiaryApi = message.state_peer.payload["api"]
    marks = await api.progress_average(date)
    await message.answer(
        message=marks.info(),
        keyboard=keyboard.marks_stats(date, api.user.children),
        dont_parse_links=True
    )


@bp.on.message(rules.CommandRule("–æ—Ü–µ–Ω–∫–∏") | rules.CommandRule("marks"), state=AuthState.AUTH)
@diary_date_error_handler.catch
async def marks_empty_command(message: Message):
    return await marks_command(message, (tomorrow(),))  # type: ignore


@bp.on.message(rules.CommandRule("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏") | rules.CommandRule("settings"), state=AuthState.AUTH)
@message_error_handler.catch
async def settings_command(message: Message):
    user: User = message.state_peer.payload["user"]
    await message.answer(
        message="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        keyboard=keyboard.settings(user)
    )


# promo command
@bp.on.message(rules.CommandRule("–≤—Ä—è–¥–ª–∏–∫—Ç–æ—Ç–æ–±—É–¥–µ—Ç—á–∏—Ç–∞—Ç—å–∏—Å—Ö–æ–¥–Ω–∏–∫–∏–∏–Ω–∞–π–¥—ë—Ç–ø–∞—Å—Ö–∞–ª–∫—É"), state=AuthState.AUTH)
@message_error_handler.catch
async def easter_egg_command(message: Message):
    user: User = message.state_peer.payload["user"]
    for child in user.children:
        child.marks = 3
        await scheduler.add(child)
    await user.save()
    await admin_log(f"@id{message.peer_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–∞—Å—Ö–∞–ª–∫—É")
    await message.answer("–ú–æ–ª–æ–¥–µ—Ü. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –ø–æ—á—Ç–∏ —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


@bp.on.message(text="/<command>", state=AuthState.AUTH)
async def undefined_command(message: Message, command: str):
    await message.answer(
        message=f"üöß –ö–æ–º–∞–Ω–¥–∞ \"/{command}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


@bp.on.message(state=AuthState.AUTH, payload_map={"menu": str})
@message_error_handler.catch
async def menu_handler(message: Message):
    menu = message.get_payload_json().get("menu")

    if menu == "diary":
        await diary_command(message, (tomorrow(),))  # type: ignore

    elif menu == "marks":
        await marks_command(message, (tomorrow(),))  # type: ignore

    elif menu == "settings":
        await settings_command(message)

    else:
        await message.answer(
            message="üöß –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...\n–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            keyboard=keyboard.MENU,
            dont_parse_links=True
        )


@bp.on.message()  # empty handlers
async def empty_handler(message: Message):
    return await start_handler(message)
