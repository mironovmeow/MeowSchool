"""
Chat integration (all chat message handler)
"""
from typing import Tuple

from vkbottle.bot import Blueprint, BotLabeler, Message, rules
from vkbottle.dispatch.dispenser import get_state_repr
from vkbottle.modules import logger
from vkbottle_types.objects import MessagesMessageActionStatus

from bot import db, keyboard
from bot.blueprints.other import AuthState, admin_log, tomorrow
from bot.error_handler import diary_date_error_handler, message_error_handler
from diary import DiaryApi

labeler = BotLabeler(auto_rules=[rules.PeerRule(True)])

bp = Blueprint(name="ChatMessage", labeler=labeler)


@bp.on.message(rules.ChatActionRule(MessagesMessageActionStatus.CHAT_INVITE_USER.value))
@message_error_handler.catch
async def invite_handler(message: Message):
    if message.action.member_id == -message.group_id:
        if message.state_peer:  # if auth
            await db.delete_chat(message.peer_id)

            api: DiaryApi = message.state_peer.payload["api"]
            await api.close()
            await bp.state_dispenser.delete(message.peer_id)

        await message.answer(
            "üëã –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º –±–æ—Ç–æ–º. "
            "üîí –ù–∞–ø–∏—à–∏—Ç–µ /–Ω–∞—á–∞—Ç—å (/start), —á—Ç–æ –±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É"
        )
        logger.info(f"Get new chat: {message.peer_id}")


@bp.on.message(rules.CommandRule("—Å—Ç–æ–ø") | rules.CommandRule("stop"))
@message_error_handler.catch
async def stop_command(message: Message):
    if not message.state_peer:  # if not auth
        await message.answer(
            "üîí –°–µ–π—á–∞—Å —ç—Ç–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –º–µ–Ω—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ –∏–∑ –±–µ—Å–µ–¥—ã"
        )
    else:  # if auth
        user_id: int = message.state_peer.payload["user_id"]
        if message.from_id != user_id:
            await message.answer(
                "üöß –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –±–µ—Å–µ–¥—É"
            )
        else:
            await message.answer(
                "üëã –ë—ã–ª —Ä–∞–¥ —Å –≤–∞–º–∏ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"
            )
            await bp.api.messages.remove_chat_user(message.chat_id, member_id=-message.group_id)
            await db.delete_chat(message.peer_id)

            api: DiaryApi = message.state_peer.payload["api"]
            await api.close()
            await bp.state_dispenser.delete(message.peer_id)

            await admin_log(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –±–µ—Å–µ–¥—É.\n{message.peer_id}")
            logger.info(f"Leave chat: {message.peer_id}")


@bp.on.message(rules.CommandRule("–ø–æ–º–æ—â—å") | rules.CommandRule("help"))
@message_error_handler.catch
async def help_command(message: Message):
    await message.answer(
        "üìí –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üî∏ /–ø–æ–º–æ—â—å -- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫\n"
        "üî∏ /–Ω–∞—á–∞—Ç—å -- –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É\n"
        "üî∏ /—Å—Ç–æ–ø -- –£–±—Ä–∞—Ç—å –±–æ—Ç–∞ –∏–∑ –±–µ—Å–µ–¥—ã\n\n"
        "üî∏ /–¥–Ω–µ–≤–Ω–∏–∫ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "üî∏ /–¥–Ω–µ–≤–Ω–∏–∫ –¥–¥.–º–º.–≥–≥–≥–≥ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ (–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏—è, –æ—Ü–µ–Ω–∫–∏)\n\n"
        "üìí –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–ª–∏–∞—Å—ã (help, start, diary)."
    )


@bp.on.message(rules.CommandRule("–Ω–∞—á–∞—Ç—å") | rules.CommandRule("start"))
@message_error_handler.catch
async def start_command(message: Message):
    if message.state_peer is None:  # if chat is not auth
        user_state_peer = await bp.state_dispenser.get(message.from_id)

        # check auth of user
        if user_state_peer is None or user_state_peer.state != get_state_repr(AuthState.AUTH):
            await message.answer(
                "üîë –î–ª—è –Ω–∞—á–∞–ª–∞, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞: vk.me/schoolbot04, "
                "–∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /–Ω–∞—á–∞—Ç—å (/start).",
                reply_to=message.id
            )

        else:
            await bp.state_dispenser.set(
                message.peer_id,
                AuthState.AUTH,
                api=user_state_peer.payload["api"],
                user_id=message.from_id
            )

            await db.add_chat(message.peer_id, message.from_id)

            await message.answer(
                "üîì –ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! –ù–∞–ø–∏—à–∏—Ç–µ /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
                reply_to=message.id
            )
            await admin_log(f"–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.\n{message.peer_id}")
            logger.info(f"Auth new chat: {message.peer_id}")
    else:
        await message.answer(
            "üöß –ë–µ—Å–µ–¥–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            reply_to=message.id
        )


@bp.on.message(rules.CommandRule(("–¥–Ω–µ–≤–Ω–∏–∫", 1)) | rules.CommandRule(("diary", 1)), state=AuthState.AUTH)
@diary_date_error_handler.catch
async def diary_command(message: Message, args: Tuple[str]):
    date = args[0]
    api: DiaryApi = message.state_peer.payload["api"]
    diary = await api.diary(date)
    await message.answer(
        message=diary.info(is_chat=True),
        keyboard=keyboard.diary_week(date, api.user.children),
        dont_parse_links=True
    )


@bp.on.message(rules.CommandRule("–¥–Ω–µ–≤–Ω–∏–∫") | rules.CommandRule("diary"), state=AuthState.AUTH)
@diary_date_error_handler.catch
async def diary_tomorrow_command(message: Message):
    return await diary_command(message, (tomorrow(),))  # type: ignore
