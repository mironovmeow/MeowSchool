"""
Error handlers (catch all errors in handlers, vkbottle)
"""
from asyncio import TimeoutError
from typing import Tuple

from aiohttp import ClientError
from loguru import logger
from pydantic import ValidationError
from vkbottle import ErrorHandler, VKAPIError
from vkbottle.bot import Message, MessageEvent

from diary.types import APIError
from .blueprints.other import admin_log
from .db import Child

message_error_handler = ErrorHandler(redirect_arguments=True)


@message_error_handler.register_error_handler(APIError)
async def message_diary(e: APIError, m: Message):
    if not e.resp.ok:
        if e.resp.status == 401:
            logger.info(f"Re-auth {m.peer_id}")
            await m.answer("üöß –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")  # todo
        else:
            logger.warning(f"{e}: Server error")
            await m.answer("üöß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

    elif e.json_not_success:
        logger.warning(f"{e}: Server error")
        await m.answer("üöß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        await admin_log("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å!")

    else:
        await admin_log("–í error_handler.py –æ—à–∏–±–∫–∞ (1)")  # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏


@message_error_handler.register_error_handler(VKAPIError[9])
async def message_vk_9(e: VKAPIError, m: Message):
    logger.info(f"VKApi flood error: {e.description} {e.code}")
    try:
        await m.answer("üöß –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∏–ª–∏ –Ω–∞—á–∞–ª—Å—è —Ñ–ª—É–¥?")
    except VKAPIError[9]:  # todo?
        ...


@message_error_handler.register_error_handler(VKAPIError)
async def message_vk(e: VKAPIError, m: Message):
    logger.warning(f"VKApi error: {e.description} {e.code}")
    await m.answer("üöß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å VK 0_o")


@message_error_handler.register_error_handler(ValidationError)
async def message_pydantic(e: ValidationError, m: Message):  # diary.types
    logger.error(f"Pydantic error\n{e}")
    await m.answer("üöß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á–∏–Ω–∏–º")
    await admin_log(f"–û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–∞—Ö —É {e.model.__name__}")


@message_error_handler.register_error_handler(TimeoutError)
async def message_aiohttp_timeout(e: TimeoutError, m: Message):
    logger.info(f"Timeout error {e}")
    await m.answer("üöß –°–µ—Ä–≤–µ—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")


@message_error_handler.register_undefined_error_handler
async def message(e: BaseException, m: Message):
    logger.exception(f"Undefined error {e}")
    await m.answer("üöß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ 0_o")


callback_error_handler = ErrorHandler(redirect_arguments=True)


@callback_error_handler.register_error_handler(APIError)
async def callback_diary(e: APIError, event: MessageEvent):
    if not e.resp.ok:
        if e.resp.status == 401:
            logger.info(f"Re-auth {event.peer_id}")
            await event.show_snackbar("üöß –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")  # todo
        else:
            logger.warning(f"Server error {e}")
            await event.show_snackbar("üöß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

    elif e.json_not_success:
        logger.warning(f"Server error {e}")
        await event.show_snackbar("üöß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

    else:
        await admin_log("–í error_handler.py –æ—à–∏–±–∫–∞ (2)")  # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏


@callback_error_handler.register_error_handler(VKAPIError[9])
async def callback_vk_9(e: VKAPIError, event: MessageEvent):
    logger.info(f"VKApi flood error: {e.description} {e.code}")
    try:
        await event.show_snackbar("üöß –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∏–ª–∏ –Ω–∞—á–∞–ª—Å—è —Ñ–ª—É–¥?")
    except VKAPIError[9]:  # todo?
        ...


@callback_error_handler.register_error_handler(VKAPIError[909])
async def callback_vk_909(e: VKAPIError, event: MessageEvent):
    logger.info(f"VKApi edit message error: {e.description} {e.code}")
    await event.show_snackbar("üöß –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ. –ï—â—ë —Ä–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")


@callback_error_handler.register_error_handler(VKAPIError)
async def callback_vk(e: VKAPIError, event: MessageEvent):
    logger.warning(f"VKApi error {e.description} {e.code}")
    await event.show_snackbar("üöß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å VK 0_o")


@callback_error_handler.register_error_handler(ValidationError)
async def callback_pydantic(e: ValidationError, event: MessageEvent):  # diary.types
    logger.error(f"Pydantic error\n{e}")
    await event.show_snackbar("üöß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á–∏–Ω–∏–º")
    await admin_log(f"–û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–∞—Ö —É {e.model.__name__}")


@callback_error_handler.register_error_handler(TimeoutError)
async def callback_aiohttp_timeout(e: TimeoutError, event: MessageEvent):
    logger.info(f"Timeout error {e}")
    await event.show_snackbar("üöß –°–µ—Ä–≤–µ—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")


@callback_error_handler.register_undefined_error_handler
async def callback(e: BaseException, event: MessageEvent):
    logger.exception(f"Undefined error {e}")
    await event.show_snackbar("üöß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ 0_o")


diary_date_error_handler = ErrorHandler(redirect_arguments=True)


# todo add data checking on server side
@diary_date_error_handler.register_error_handler(APIError)
async def diary_date_diary(e: APIError, m: Message, args: Tuple[str]):
    if e.json_not_success:
        logger.info(f"{e}: Wrong date {args[0]}")
        await m.answer("üöß –£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    else:
        await message_diary(e, m)


@diary_date_error_handler.register_undefined_error_handler
async def diary_date(e: APIError, m: Message, args):
    return await message_error_handler.handle(e, m)


vkbottle_error_handler = ErrorHandler()


@vkbottle_error_handler.register_error_handler(ClientError)
async def vkbottle_aiohttp(e: ClientError):
    logger.warning(f"Aiohttp ClientError. Ignoring\n{e}")


@vkbottle_error_handler.register_error_handler(ValidationError)
async def vkbottle_pydantic(e: ValidationError):  # vkbottle_types
    logger.error(f"Pydantic error\n{e}")
    await admin_log(f"–û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–∞—Ö —É {e.model.__name__}")


@vkbottle_error_handler.register_undefined_error_handler
async def vkbottle(_: BaseException):
    logger.exception("Error in vkbottle module")


scheduler_error_handler = ErrorHandler(True)


@scheduler_error_handler.register_error_handler(APIError)
async def scheduler_diary(e: APIError, child: Child):
    logger.warning(f"Server error {e}")
    await admin_log(f"–û—à–∏–±–∫–∞ –≤ scheduler(1) —É @id{child.vk_id}")


@scheduler_error_handler.register_error_handler(TimeoutError)
async def scheduler_aiohttp_timeout(e: TimeoutError, child: Child):
    logger.info(f"Timeout error {e}")


@scheduler_error_handler.register_undefined_error_handler
async def scheduler(e: BaseException, child: Child):
    logger.exception(f"Undefined error {e}")
    await admin_log(f"–û—à–∏–±–∫–∞ –≤ scheduler(undefined) —É @id{child.vk_id}")

# todo add more errors (for handling, of course)
