"""
Chat integration (all chat message handler)
"""
from typing import Tuple

from barsdiary.aio import DiaryApi
from loguru import logger
from vkbottle.bot import Blueprint, BotLabeler, Message, rules
from vkbottle.dispatch.dispenser import get_state_repr
from vkbottle_types.objects import MessagesMessageActionStatus

from vk_bot import keyboard
from vk_bot.db import Chat
from vk_bot.diary_infromation import diary_info
from vk_bot.error_handler import diary_date_error_handler, message_error_handler

from .other import MeowState, admin_log, tomorrow

labeler = BotLabeler(auto_rules=[rules.PeerRule(True)])

bp = Blueprint(name="Chat", labeler=labeler)


@bp.on.message(rules.ChatActionRule(MessagesMessageActionStatus.CHAT_INVITE_USER.value))
@message_error_handler.catch
async def invite_handler(message: Message):
    if message.action.member_id == -message.group_id:
        if message.state_peer:  # if auth  todo is it possible?
            chat = await Chat.get(message.peer_id)
            user_state_peer = await bp.state_dispenser.get(chat.vk_id)
            await bp.state_dispenser.set(
                message.peer_id,
                MeowState.AUTH,
                api=user_state_peer.payload["api"],
                user_id=message.from_id,
                child_id=0,
            )

            await message.answer(
                "üîì –≠—Ç–∞ –±–µ—Å–µ–¥–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! "
                "–ù–∞–ø–∏—à–∏—Ç–µ /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
                reply_to=message.id,
            )
        else:
            await message.answer(
                "üëã –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º –±–æ—Ç–æ–º. "
                "üîí –ù–∞–ø–∏—à–∏—Ç–µ /–Ω–∞—á–∞—Ç—å (/start), —á—Ç–æ –±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É"
            )
        logger.info(f"Get new chat: {message.peer_id}")


# TODO TODO TODO TODO
@bp.on.message(state=MeowState.NOT_AUTH)
@message_error_handler.catch
async def not_auth_handler(message: Message):
    await message.answer(message="üöß –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ")
    await admin_log(f"chat{message.chat_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")


@bp.on.message(rules.CommandRule("—Å—Ç–æ–ø") | rules.CommandRule("stop"))
@message_error_handler.catch
async def stop_command(message: Message):
    if not message.state_peer:  # if not auth
        await message.answer("üîí –≠—Ç–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ë–æ—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ—Å–µ–¥—ã")
    else:  # if auth
        user_id: int = message.state_peer.payload["user_id"]
        if message.from_id != user_id:
            await message.answer("üöß –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –±–µ—Å–µ–¥—É")
        else:
            await message.answer(
                "üëã –ë—ã–ª —Ä–∞–¥ —Å –≤–∞–º–∏ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å\nüîí –¢–µ–ø–µ—Ä—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ—Å–µ–¥—ã"
            )
            chat = await Chat.get(message.peer_id)
            await bp.state_dispenser.delete(message.peer_id)

            if chat:
                await chat.delete()

            await admin_log(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –±–µ—Å–µ–¥—É.\nchat{message.chat_id}")
            logger.info(f"Leave chat: chat{message.chat_id}")


@bp.on.message(rules.CommandRule("–ø–æ–º–æ—â—å") | rules.CommandRule("help"))
@message_error_handler.catch
async def help_command(message: Message):
    await message.answer(
        "üìí –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üî∏ /–ø–æ–º–æ—â—å -- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫\n"
        "üî∏ /–Ω–∞—á–∞—Ç—å -- –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É\n"
        "üî∏ /—Å—Ç–æ–ø -- –£–±—Ä–∞—Ç—å –±–æ—Ç–∞ –∏–∑ –±–µ—Å–µ–¥—ã\n\n"
        "üî∏ /–¥–Ω–µ–≤–Ω–∏–∫ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "üî∏ /–¥–Ω–µ–≤–Ω–∏–∫ –¥–¥.–º–º.–≥–≥–≥–≥ -- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
        "üìí –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–ª–∏–∞—Å—ã (help, start, stop, diary)."
    )


@bp.on.message(rules.CommandRule("–Ω–∞—á–∞—Ç—å") | rules.CommandRule("start"))
@message_error_handler.catch
async def start_command(message: Message):
    if message.state_peer is None:  # if chat is not auth
        user_state_peer = await bp.state_dispenser.get(message.from_id)

        # check auth of user
        if user_state_peer is None or user_state_peer.state != get_state_repr(MeowState.AUTH):
            await message.answer(
                "üîí –î–ª—è –Ω–∞—á–∞–ª–∞, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞: vk.me/schoolbot04, "
                "–∑–∞—Ç–µ–º –∑–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å /–Ω–∞—á–∞—Ç—å (/start).",
                reply_to=message.id,
            )

        else:
            await bp.state_dispenser.set(
                message.peer_id,
                MeowState.AUTH,
                api=user_state_peer.payload["api"],
                user_id=message.from_id,
                child_id=0,
            )

            await Chat.create(message.peer_id, message.from_id)

            await message.answer(
                "üîì –ë–µ—Å–µ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! "
                "–ù–∞–ø–∏—à–∏—Ç–µ /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
                reply_to=message.id,
            )
            await admin_log(f"–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.\nchat{message.chat_id}")
            logger.info(f"Auth new chat: chat{message.chat_id}")
    else:
        await message.answer(
            "üîì –ë–µ—Å–µ–¥–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /–ø–æ–º–æ—â—å (/help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
            reply_to=message.id,
        )


# todo flood control
@bp.on.message(
    rules.CommandRule(("–¥–Ω–µ–≤–Ω–∏–∫", 1)) | rules.CommandRule(("diary", 1)), state=MeowState.AUTH
)
@diary_date_error_handler.catch
async def diary_command(message: Message, args: Tuple[str]):
    date = args[0]
    api: DiaryApi = message.state_peer.payload["api"]
    child_id: int = message.state_peer.payload["child_id"]
    diary = await api.diary(date, child=child_id)
    await message.answer(
        message=diary_info(diary, is_chat=True),
        keyboard=keyboard.diary_week(date),
        dont_parse_links=True,
    )


@bp.on.message(rules.CommandRule("–¥–Ω–µ–≤–Ω–∏–∫") | rules.CommandRule("diary"), state=MeowState.AUTH)
@diary_date_error_handler.catch
async def diary_tomorrow_command(message: Message):
    return await diary_command(message, (tomorrow(),))  # type: ignore
